#!/bin/bash

# Загружаем переменные из .env
set -o allexport
source ./.env
set +o allexport

# Автоматический поиск main файлов Flutter frontend
cd "$(dirname "$0")" && docker compose down > /dev/null 2>&1
cd "$(dirname "$0")/../electronicqueue-frontend" && docker compose down > /dev/null 2>&1
cd - > /dev/null > /dev/null 2>&1

# Kill processes on BACKEND_PORT, FRONTEND_PORT
kill_by_port() {
  local PORT=$1
  if command -v lsof >/dev/null 2>&1; then
    local PID
    PID=$(lsof -ti tcp:$PORT)
    if [ -n "$PID" ]; then
      echo "Killing process on port $PORT (PID $PID) via lsof"
      kill -9 $PID
      sleep 1
    fi
  elif command -v fuser >/dev/null 2>&1; then
    local PID
    PID=$(fuser $PORT/tcp 2>/dev/null)
    if [ -n "$PID" ]; then
      echo "Killing process on port $PORT (PID $PID) via fuser"
      kill -9 $PID
      sleep 1
    fi
  fi
  # Windows: netstat + taskkill
  if [[ "$(uname -s 2>/dev/null)" =~ (MINGW|MSYS|CYGWIN|Windows_NT) ]]; then
    local PIDS
    PIDS=$(netstat -ano | grep :$PORT | awk '{print $5}' | sort | uniq)
    for PID in $PIDS; do
      if [ -n "$PID" ]; then
        echo "Killing process on port $PORT (PID $PID) via taskkill"
        taskkill //PID $PID //F 2>/dev/null
        sleep 1
      fi
    done
  fi
}

# --- Аргументы ---
usage() {
  echo "Usage: $0 [go|go-docker] [flutter|flutter-docker] [local|docker]"
  echo
  echo "Key descriptions:"
  echo "  go               - Run Go backend"
  echo "  go-docker        - Run Go backend in Docker"
  echo "  flutter          - Run Flutter frontend"
  echo "  flutter-docker   - Run Flutter frontend in Docker"
  echo "  local            - Run Go and Flutter locally"
  echo "  docker           - Run Go and Flutter in Docker"
  exit 1
}

if [[ $# -eq 0 ]]; then
  usage
fi
RUN_GO=""
RUN_GO_DOCKER=""
RUN_FLUTTER=""
RUN_FLUTTER_DOCKER=""
for arg in "$@"; do
  case $arg in
    go)
      RUN_GO="true"
      ;;
    go-docker)
      RUN_GO_DOCKER="true"
      ;;
    flutter)
      RUN_FLUTTER="true"
      ;;
    flutter-docker)
      RUN_FLUTTER_DOCKER="true"
      ;;
    local)
      RUN_GO="true"
      RUN_FLUTTER="true"
      ;;
    docker)
      RUN_GO_DOCKER="true"
      RUN_FLUTTER_DOCKER="true"
      ;;
    *)
      usage
      ;;
  esac
done

# Kill processes on BACKEND_PORT, FRONTEND_PORT
if { [[ "$RUN_GO" == "true" && -n "$BACKEND_PORT" ]] || [[ "$RUN_GO_DOCKER" == "true" && -n "$BACKEND_PORT" ]]; }; then
  kill_by_port $BACKEND_PORT
fi
if { [[ "$RUN_FLUTTER" == "true" && -n "$FRONTEND_PORT" ]] || [[ "$RUN_FLUTTER_DOCKER" == "true" && -n "$FRONTEND_PORT" ]]; }; then
  cd "$(dirname "$0")/../electronicqueue-frontend/lib" || { echo "lib directory not found!"; exit 1; }
  mapfile -t FLUTTER_MAIN_FILES < <(find . -maxdepth 2 -mindepth 2 -type f -name '*main*.dart' | sed 's|^./||')
  cd - > /dev/null 2>&1
  N=${#FLUTTER_MAIN_FILES[@]}
  for ((i=0; i<N; i++)); do
    PORT=$((FRONTEND_PORT+i))
    kill_by_port $PORT
  done
fi

# Run Go backend
if [[ "$RUN_GO" == "true" ]]; then
  echo "Updating Swagger documentation..."
  if ! swag init --dir ./cmd,./internal --output ./docs; then
    echo "Failed to update Swagger documentation."
    exit 1
  fi
  echo "Starting Go backend..."
  if (cd "$(dirname "$0")" && go run cmd/main.go &); then
    echo "Go backend started."
  else
    echo "Failed to start Go backend."
    exit 1
  fi



elif [[ "$RUN_GO_DOCKER" == "true" ]]; then
  echo "Starting Go backend via Docker Compose..."
  if ! docker info > /dev/null 2>&1; then
    echo "Make sure that Docker Engine is running. Try restarting Docker Desktop."
    exit 1
  fi
  docker compose down > /dev/null 2>&1
  if (cd "$(dirname "$0")" && docker compose up &); then
    echo "Go backend (Docker Compose) started."
  else
    echo "Failed to start Go backend (Docker Compose)."
    exit 1
  fi
fi



# Run Flutter frontend
if [[ "$RUN_FLUTTER" == "true" ]]; then
  cd "$(dirname "$0")/../electronicqueue-frontend" || { echo "Failed to change directory to electronicqueue-frontend."; exit 1; }
  if flutter pub get; then
    echo "Flutter setup complete."
  else
    echo "Failed to fetch packages."
    exit 1
  fi
  if [ -z "$FRONTEND_PORT" ]; then
    echo "FRONTEND_PORT is not set in .env!"
    exit 1
  fi
  PORT=$FRONTEND_PORT
  for MAIN_FILE in "${FLUTTER_MAIN_FILES[@]}"; do
    echo "Starting Flutter frontend: $MAIN_FILE on port $PORT..."
    flutter run -t "lib/$MAIN_FILE" -d ${BROWSER:-chrome} --web-port=$PORT &
    PORT=$((PORT+1))
  done
  echo "All Flutter frontends started."
  cd - > /dev/null



elif [[ "$RUN_FLUTTER_DOCKER" == "true" ]]; then
  echo "Starting Flutter frontend containers from compose.yaml..."
  cd "$(dirname "$0")/../electronicqueue-frontend" || { echo "Failed to change directory to electronicqueue-frontend."; exit 1; }
  if ! docker info > /dev/null 2>&1; then
    echo "Make sure that Docker Engine is running. Try restarting Docker Desktop."
    exit 1
  fi
  docker compose down > /dev/null 2>&1
  if [ ! -f compose.yaml ]; then
    echo "compose.yaml not found! Please run install.sh with --flutter-docker first."
    exit 1
  fi
  PORT=$FRONTEND_PORT
  for MAIN_FILE in "${FLUTTER_MAIN_FILES[@]}"; do
    echo "Starting Flutter frontend: $MAIN_FILE on port $PORT..."
    start "" "http://localhost:$PORT/"
    PORT=$((PORT+1))
  done
  docker compose up &
  cd - > /dev/null
fi

wait
exit 0